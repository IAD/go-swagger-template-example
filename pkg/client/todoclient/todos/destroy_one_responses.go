// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	todoclientmodels "github.com/IAD/go-swagger-template-example/pkg/client/todoclientmodels"
)

// DestroyOneReader is a Reader for the DestroyOne structure.
type DestroyOneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DestroyOneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDestroyOneNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDestroyOneNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewDestroyOneInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested DELETE /{id} returns an error %d: %s", response.Code(), string(data))
	}
}

// NewDestroyOneNoContent creates a DestroyOneNoContent with default headers values
func NewDestroyOneNoContent() *DestroyOneNoContent {
	return &DestroyOneNoContent{}
}

/*DestroyOneNoContent handles this case with default header values.

Deleted
*/
type DestroyOneNoContent struct {
}

func (o *DestroyOneNoContent) Error() string {
	return fmt.Sprintf("[DELETE /{id}][%d] destroyOneNoContent ", 204)
}

func (o *DestroyOneNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDestroyOneNotFound creates a DestroyOneNotFound with default headers values
func NewDestroyOneNotFound() *DestroyOneNotFound {
	return &DestroyOneNotFound{}
}

/*DestroyOneNotFound handles this case with default header values.

Not Found
*/
type DestroyOneNotFound struct {
	Payload *todoclientmodels.Error
}

func (o *DestroyOneNotFound) Plain() (code string, message string, attributes map[string]string) {
	return o.Payload.Code, o.Payload.Message, o.Payload.Attributes
}

func (o *DestroyOneNotFound) Error() string {
	return fmt.Sprintf("[DELETE /{id}][%d] destroyOneNotFound  %+v", 404, o.Payload)
}

func (o *DestroyOneNotFound) GetPayload() *todoclientmodels.Error {
	return o.Payload
}

func (o *DestroyOneNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(todoclientmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDestroyOneInternalServerError creates a DestroyOneInternalServerError with default headers values
func NewDestroyOneInternalServerError() *DestroyOneInternalServerError {
	return &DestroyOneInternalServerError{}
}

/*DestroyOneInternalServerError handles this case with default header values.

Internal Error
*/
type DestroyOneInternalServerError struct {
	Payload *todoclientmodels.Error
}

func (o *DestroyOneInternalServerError) Plain() (code string, message string, attributes map[string]string) {
	return o.Payload.Code, o.Payload.Message, o.Payload.Attributes
}

func (o *DestroyOneInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /{id}][%d] destroyOneInternalServerError  %+v", 500, o.Payload)
}

func (o *DestroyOneInternalServerError) GetPayload() *todoclientmodels.Error {
	return o.Payload
}

func (o *DestroyOneInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(todoclientmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
