// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/sirupsen/logrus"

	models "github.com/IAD/go-swagger-template-example/internal/server/models"
)

// FindOKCode is the HTTP code returned for type FindOK
const FindOKCode int = 200

/*FindOK OK

swagger:response findOK
*/
type FindOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Item `json:"body,omitempty"`
}

// NewFindOKFunc is declaration for func that create response
type NewFindOKFunc func() *FindOK

// NewFindOK creates FindOK with default headers values
func NewFindOK() *FindOK {

	return &FindOK{}
}

// WithPayload adds the payload to the find o k response
func (o *FindOK) WithPayload(payload []*models.Item) *FindOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find o k response
func (o *FindOK) SetPayload(payload []*models.Item) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Item, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		logrus.Panic(err) // let the recovery middleware deal with this
	}

}

// FindNotFoundCode is the HTTP code returned for type FindNotFound
const FindNotFoundCode int = 404

/*FindNotFound Not Found

swagger:response findNotFound
*/
type FindNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFindNotFoundFunc is declaration for func that create response
type NewFindNotFoundFunc func() *FindNotFound

// NewFindNotFound creates FindNotFound with default headers values
func NewFindNotFound() *FindNotFound {

	return &FindNotFound{}
}

// WithPayload adds the payload to the find not found response
func (o *FindNotFound) WithPayload(payload *models.Error) *FindNotFound {
	o.Payload = payload
	return o
}

// WithErr adds the Error payload with a default code to the find not found response
func (o *FindNotFound) WithErr(err error) *FindNotFound {
	type swaggerErr interface {
		Plain() (code string, message string, attributes map[string]string)
	}

	if swaggerErr, ok := err.(swaggerErr); ok {
		code, message, attributes := swaggerErr.Plain()

		o.Payload = &models.Error{
			Code:       code,
			Message:    message,
			Attributes: attributes,
		}
		return o
	}

	return o.WithError("500", err.Error())
}

// WithError  adds the Error payload to the find not found response
func (o *FindNotFound) WithError(code string, message string) *FindNotFound {
	o.Payload = &models.Error{
		Attributes: nil,
		Code:       code,
		Message:    message,
	}
	return o
}

// SetPayload sets the payload to the find not found response
func (o *FindNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}

// FindInternalServerErrorCode is the HTTP code returned for type FindInternalServerError
const FindInternalServerErrorCode int = 500

/*FindInternalServerError Internal Error

swagger:response findInternalServerError
*/
type FindInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFindInternalServerErrorFunc is declaration for func that create response
type NewFindInternalServerErrorFunc func() *FindInternalServerError

// NewFindInternalServerError creates FindInternalServerError with default headers values
func NewFindInternalServerError() *FindInternalServerError {

	return &FindInternalServerError{}
}

// WithPayload adds the payload to the find internal server error response
func (o *FindInternalServerError) WithPayload(payload *models.Error) *FindInternalServerError {
	o.Payload = payload
	return o
}

// WithErr adds the Error payload with a default code to the find internal server error response
func (o *FindInternalServerError) WithErr(err error) *FindInternalServerError {
	type swaggerErr interface {
		Plain() (code string, message string, attributes map[string]string)
	}

	if swaggerErr, ok := err.(swaggerErr); ok {
		code, message, attributes := swaggerErr.Plain()

		o.Payload = &models.Error{
			Code:       code,
			Message:    message,
			Attributes: attributes,
		}
		return o
	}

	return o.WithError("500", err.Error())
}

// WithError  adds the Error payload to the find internal server error response
func (o *FindInternalServerError) WithError(code string, message string) *FindInternalServerError {
	o.Payload = &models.Error{
		Attributes: nil,
		Code:       code,
		Message:    message,
	}
	return o
}

// SetPayload sets the payload to the find internal server error response
func (o *FindInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}
