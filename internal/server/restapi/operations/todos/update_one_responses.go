// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/sirupsen/logrus"

	models "github.com/IAD/go-swagger-template-example/internal/server/models"
)

// UpdateOneOKCode is the HTTP code returned for type UpdateOneOK
const UpdateOneOKCode int = 200

/*UpdateOneOK OK

swagger:response updateOneOK
*/
type UpdateOneOK struct {

	/*
	  In: Body
	*/
	Payload *models.Item `json:"body,omitempty"`
}

// NewUpdateOneOKFunc is declaration for func that create response
type NewUpdateOneOKFunc func() *UpdateOneOK

// NewUpdateOneOK creates UpdateOneOK with default headers values
func NewUpdateOneOK() *UpdateOneOK {

	return &UpdateOneOK{}
}

// WithPayload adds the payload to the update one o k response
func (o *UpdateOneOK) WithPayload(payload *models.Item) *UpdateOneOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update one o k response
func (o *UpdateOneOK) SetPayload(payload *models.Item) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateOneOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateOneNotFoundCode is the HTTP code returned for type UpdateOneNotFound
const UpdateOneNotFoundCode int = 404

/*UpdateOneNotFound Not Found

swagger:response updateOneNotFound
*/
type UpdateOneNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateOneNotFoundFunc is declaration for func that create response
type NewUpdateOneNotFoundFunc func() *UpdateOneNotFound

// NewUpdateOneNotFound creates UpdateOneNotFound with default headers values
func NewUpdateOneNotFound() *UpdateOneNotFound {

	return &UpdateOneNotFound{}
}

// WithPayload adds the payload to the update one not found response
func (o *UpdateOneNotFound) WithPayload(payload *models.Error) *UpdateOneNotFound {
	o.Payload = payload
	return o
}

// WithErr adds the Error payload with a default code to the update one not found response
func (o *UpdateOneNotFound) WithErr(err error) *UpdateOneNotFound {
	type swaggerErr interface {
		Plain() (code string, message string, attributes map[string]string)
	}

	if swaggerErr, ok := err.(swaggerErr); ok {
		code, message, attributes := swaggerErr.Plain()

		o.Payload = &models.Error{
			Code:       code,
			Message:    message,
			Attributes: attributes,
		}
		return o
	}

	return o.WithError("500", err.Error())
}

// WithError  adds the Error payload to the update one not found response
func (o *UpdateOneNotFound) WithError(code string, message string) *UpdateOneNotFound {
	o.Payload = &models.Error{
		Attributes: nil,
		Code:       code,
		Message:    message,
	}
	return o
}

// SetPayload sets the payload to the update one not found response
func (o *UpdateOneNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateOneNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateOneInternalServerErrorCode is the HTTP code returned for type UpdateOneInternalServerError
const UpdateOneInternalServerErrorCode int = 500

/*UpdateOneInternalServerError Internal Error

swagger:response updateOneInternalServerError
*/
type UpdateOneInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateOneInternalServerErrorFunc is declaration for func that create response
type NewUpdateOneInternalServerErrorFunc func() *UpdateOneInternalServerError

// NewUpdateOneInternalServerError creates UpdateOneInternalServerError with default headers values
func NewUpdateOneInternalServerError() *UpdateOneInternalServerError {

	return &UpdateOneInternalServerError{}
}

// WithPayload adds the payload to the update one internal server error response
func (o *UpdateOneInternalServerError) WithPayload(payload *models.Error) *UpdateOneInternalServerError {
	o.Payload = payload
	return o
}

// WithErr adds the Error payload with a default code to the update one internal server error response
func (o *UpdateOneInternalServerError) WithErr(err error) *UpdateOneInternalServerError {
	type swaggerErr interface {
		Plain() (code string, message string, attributes map[string]string)
	}

	if swaggerErr, ok := err.(swaggerErr); ok {
		code, message, attributes := swaggerErr.Plain()

		o.Payload = &models.Error{
			Code:       code,
			Message:    message,
			Attributes: attributes,
		}
		return o
	}

	return o.WithError("500", err.Error())
}

// WithError  adds the Error payload to the update one internal server error response
func (o *UpdateOneInternalServerError) WithError(code string, message string) *UpdateOneInternalServerError {
	o.Payload = &models.Error{
		Attributes: nil,
		Code:       code,
		Message:    message,
	}
	return o
}

// SetPayload sets the payload to the update one internal server error response
func (o *UpdateOneInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateOneInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}
